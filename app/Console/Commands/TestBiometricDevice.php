<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\BiometricDevice;
use App\Services\BiometricSync\Drivers\ApiFacialDriver;
use Illuminate\Support\Facades\Http;
use Carbon\Carbon;
use App\Services\BiometricSync\DriverFactory;

class TestBiometricDevice extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'biometric:test-device {id? : ID de l\'appareil √† tester} {--all : Tester tous les appareils actifs} {--json : Afficher les donn√©es JSON r√©cup√©r√©es}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Tester la connectivit√© d\'un ou plusieurs appareils biom√©triques';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info("üöÄ TEST R√âCUP√âRATION ET CONSOLIDATION DONN√âES JSON");
        $this->info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        $deviceId = $this->argument('device_id');
        $showJson = $this->option('json');
        
        try {
            // R√©cup√©rer l'appareil
            $device = BiometricDevice::find($deviceId);
            
            if (!$device) {
                $this->error("‚ùå Appareil non trouv√© avec l'ID: {$deviceId}");
                return 1;
            }

            $this->info("üì± APPAREIL TEST√â:");
            $this->table(
                ['Propri√©t√©', 'Valeur'],
                [
                    ['ID', $device->id],
                    ['Nom', $device->name],
                    ['Marque', $device->brand ?? 'N/A'],
                    ['Type de connexion', $device->connection_type ?? 'N/A'],
                    ['URL API', $device->api_url],
                    ['Statut', $device->connection_status],
                    ['Derni√®re Sync', $device->last_sync_at?->format('Y-m-d H:i:s') ?? 'Jamais']
                ]
            );

            $this->newLine();
            $this->info("üåê √âTAPE 1: Test de connectivit√©...");
            
            // Tester la connectivit√© de base
            $startTime = microtime(true);
            
            try {
                $response = Http::timeout(15)
                    ->withOptions(['verify' => false])
                    ->get($device->api_url);
                
                $responseTime = round((microtime(true) - $startTime) * 1000, 2);
                
                if ($response->successful()) {
                    $this->info("‚úÖ Connectivit√©: SUCC√àS ({$responseTime}ms)");
                    $this->info("üìä Status HTTP: {$response->status()}");
                    $this->info("üì¶ Taille r√©ponse: " . strlen($response->body()) . " octets");
                } else {
                    $this->error("‚ùå Connectivit√©: √âCHEC - HTTP {$response->status()}");
                    return 1;
                }
            } catch (\Exception $e) {
                $this->error("‚ùå Connectivit√©: ERREUR - " . $e->getMessage());
                return 1;
            }

            $this->newLine();
            $this->info("üîç √âTAPE 2: Test r√©cup√©ration et consolidation des donn√©es...");
            
            // Cr√©er le driver ApiFacialDriver directement (car c'est ce qui est configur√©)
            $driver = new \App\Services\BiometricSync\Drivers\ApiFacialDriver($device);
            
            $this->info("üîß Driver cr√©√©: " . get_class($driver));
            
            // R√©cup√©rer les donn√©es avec la nouvelle logique
            $consolidatedData = $driver->fetchAttendanceData();
            
            $this->newLine();
            $this->info("üìä R√âSULTATS DE LA CONSOLIDATION:");
            $this->info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            
            if (empty($consolidatedData)) {
                $this->warn("‚ö†Ô∏è Aucune donn√©e consolid√©e r√©cup√©r√©e");
                
                // Essayer de r√©cup√©rer les donn√©es brutes pour debugging
                if ($showJson) {
                    $this->info("üîç Tentative de r√©cup√©ration des donn√©es brutes...");
                    $rawResponse = Http::timeout(15)->withOptions(['verify' => false])->get($device->api_url);
                    
                    if ($rawResponse->successful()) {
                        $this->info("üì• DONN√âES BRUTES JSON:");
                        $this->line($rawResponse->body());
                    }
                }
            } else {
                $this->info("‚úÖ Donn√©es consolid√©es: " . count($consolidatedData) . " enregistrement(s)");
                
                // Afficher un r√©sum√© des donn√©es consolid√©es
                $this->displayConsolidatedSummary($consolidatedData);
                
                // Afficher les d√©tails si demand√©
                if ($showJson) {
                    $this->newLine();
                    $this->info("üìÑ D√âTAILS DES DONN√âES CONSOLID√âES:");
                    $this->info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                    
                    foreach ($consolidatedData as $index => $record) {
                        $this->info("üìù Enregistrement " . ($index + 1) . ":");
                        $this->table(
                            ['Champ', 'Valeur'],
                            [
                                ['Employ√© ID', $record['employee_id'] ?? 'N/A'],
                                ['Date', $record['date'] ?? 'N/A'],
                                ['Heure Arriv√©e', $record['heure_arrivee'] ?? 'N/A'],
                                ['Heure D√©part', $record['heure_depart'] ?? 'N/A'],
                                ['Heures Travaill√©es', $record['heures_travaillees'] ?? 'N/A'],
                                ['Source', $record['source'] ?? 'N/A'],
                                ['Records Consolid√©s', $record['records_consolidated'] ?? 'N/A'],
                                ['Logique Utilis√©e', $record['consolidation_logic'] ?? 'N/A']
                            ]
                        );
                        
                        if ($index < count($consolidatedData) - 1) {
                            $this->newLine();
                        }
                    }
                }
            }

            $this->newLine();
            $this->info("üéØ √âTAPE 3: Test d'insertion en base...");
            
            if (!empty($consolidatedData)) {
                $syncService = new \App\Services\BiometricSynchronizationService();
                $result = $syncService->syncDevice($device);
                
                $this->info("üíæ R√âSULTATS INSERTION:");
                $this->table(
                    ['M√©trique', 'Valeur'],
                    [
                        ['Succ√®s', $result['success'] ? '‚úÖ Oui' : '‚ùå Non'],
                        ['Message', $result['message']],
                        ['Enregistrements trait√©s', $result['processed_records'] ?? 0],
                        ['Nouveaux ins√©r√©s', $result['inserted_records'] ?? 0],
                        ['Mis √† jour', $result['updated_records'] ?? 0],
                        ['Temps d\'ex√©cution', ($result['execution_time'] ?? 0) . 's']
                    ]
                );
            } else {
                $this->warn("‚ö†Ô∏è Aucune donn√©e √† ins√©rer");
            }

            $this->newLine();
            $this->info("üéâ TEST TERMIN√â");
            $this->info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            
            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå ERREUR DURANT LE TEST: " . $e->getMessage());
            $this->error("üìç Trace: " . $e->getFile() . ":" . $e->getLine());
            
            if ($this->option('verbose')) {
                $this->error("üîç Stack trace complet:");
                $this->error($e->getTraceAsString());
            }
            
            return 1;
        }
    }

    /**
     * Tester tous les appareils actifs
     */
    private function testAllDevices()
    {
        $devices = BiometricDevice::where('active', true)->get();
        
        if ($devices->isEmpty()) {
            $this->error('‚ùå Aucun appareil actif trouv√©.');
            return;
        }

        $this->info("üìä Test de {$devices->count()} appareil(s) actif(s)...");
        $this->newLine();

        $results = [];
        
        foreach ($devices as $device) {
            $result = $this->performDeviceTest($device);
            $results[] = $result;
            
            $this->displayDeviceResult($device, $result);
            $this->newLine();
        }

        $this->displaySummary($results);
    }

    /**
     * Tester un appareil sp√©cifique
     */
    private function testSingleDevice($deviceId)
    {
        $device = BiometricDevice::find($deviceId);
        
        if (!$device) {
            $this->error("‚ùå Appareil avec l'ID {$deviceId} non trouv√©.");
            return;
        }

        $this->info("üì° Test de l'appareil : {$device->name}");
        $this->newLine();

        if ($this->option('json')) {
            // Mode JSON d√©taill√©
            $this->testDeviceJson($device);
        } else {
            // Mode test standard
            $result = $this->performDeviceTest($device);
            $this->displayDeviceResult($device, $result, true);
        }
    }

    /**
     * Permettre √† l'utilisateur de s√©lectionner un appareil
     */
    private function selectDevice()
    {
        $devices = BiometricDevice::all();
        
        if ($devices->isEmpty()) {
            $this->error('‚ùå Aucun appareil configur√©.');
            return null;
        }

        $choices = [];
        foreach ($devices as $device) {
            $status = $device->active ? 'üü¢' : 'üî¥';
            $choices[$device->id] = "{$status} {$device->name} ({$device->brand})";
        }

        $deviceId = $this->choice('Choisir un appareil √† tester:', $choices);
        
        return array_search($deviceId, $choices);
    }

    /**
     * Effectuer le test de connectivit√©
     */
    private function performDeviceTest(BiometricDevice $device)
    {
        $startTime = microtime(true);
        $result = [
            'success' => false,
            'response_time' => 0,
            'error' => null,
            'data_count' => 0,
            'url_tested' => $device->api_url,
            'details' => []
        ];

        try {
            if ($device->connection_type === 'api') {
                $result = $this->testApiDevice($device);
            } elseif ($device->connection_type === 'ip') {
                $result = $this->testIpDevice($device);
            } else {
                $result['error'] = "Type de connexion non support√© : {$device->connection_type}";
            }

        } catch (\Exception $e) {
            $result['error'] = $e->getMessage();
        }

        $result['response_time'] = round((microtime(true) - $startTime) * 1000, 2);

        // Mettre √† jour le statut de l'appareil
        $device->update([
            'connection_status' => $result['success'] ? 'connected' : 'disconnected',
            'last_connection_test_at' => Carbon::now(),
            'last_error' => $result['success'] ? null : $result['error']
        ]);

        return $result;
    }

    /**
     * Tester un appareil API
     */
    private function testApiDevice(BiometricDevice $device)
    {
        $result = [
            'success' => false,
            'error' => null,
            'data_count' => 0,
            'url_tested' => $device->api_url,
            'details' => []
        ];

        if (!$device->api_url) {
            $result['error'] = 'URL de l\'API non configur√©e';
            return $result;
        }

        if ($device->brand === 'api-facial') {
            // Utiliser le driver ApiFacialDriver
            $driver = new ApiFacialDriver($device);
            
            $testResult = $driver->testConnection($device);
            if ($testResult['success']) {
                $result['success'] = true;
                $result['details'][] = 'Connexion API Facial r√©ussie';
                
                // Tenter de r√©cup√©rer les donn√©es
                try {
                    $data = $driver->fetchAttendanceData();
                    $result['data_count'] = count($data);
                    $result['details'][] = "Donn√©es r√©cup√©r√©es : {$result['data_count']} pointages";
                } catch (\Exception $e) {
                    $result['details'][] = "Erreur r√©cup√©ration donn√©es : " . $e->getMessage();
                }
            } else {
                $result['error'] = '√âchec de la connexion API Facial: ' . $testResult['message'];
            }
        } else {
            // Test HTTP g√©n√©rique
            $response = Http::timeout(10)->get($device->api_url);
            
            if ($response->successful()) {
                $result['success'] = true;
                $result['details'][] = "HTTP {$response->status()} OK";
                
                $data = $response->json();
                if (is_array($data)) {
                    $result['data_count'] = count($data);
                    $result['details'][] = "Donn√©es JSON : {$result['data_count']} √©l√©ments";
                }
            } else {
                $result['error'] = "HTTP {$response->status()}: {$response->body()}";
            }
        }

        return $result;
    }

    /**
     * Tester un appareil IP
     */
    private function testIpDevice(BiometricDevice $device)
    {
        $result = [
            'success' => false,
            'error' => null,
            'data_count' => 0,
            'url_tested' => "{$device->ip_address}:{$device->port}",
            'details' => []
        ];

        if (!$device->ip_address) {
            $result['error'] = 'Adresse IP non configur√©e';
            return $result;
        }

        $port = $device->port ?: 80;
        
        // Test de connectivit√© TCP
        $connection = @fsockopen($device->ip_address, $port, $errno, $errstr, 5);
        
        if ($connection) {
            fclose($connection);
            $result['success'] = true;
            $result['details'][] = "Connexion TCP r√©ussie sur {$device->ip_address}:{$port}";
        } else {
            $result['error'] = "Connexion TCP √©chou√©e : {$errstr} (code: {$errno})";
        }

        return $result;
    }

    /**
     * Afficher le r√©sultat pour un appareil
     */
    private function displayDeviceResult(BiometricDevice $device, array $result, bool $detailed = false)
    {
        $status = $result['success'] ? '‚úÖ' : '‚ùå';
        $statusText = $result['success'] ? 'CONNECT√â' : '√âCHEC';
        
        $this->line("<fg=white;bg=" . ($result['success'] ? 'green' : 'red') . "> {$status} {$device->name} - {$statusText} </>");
        
        if ($detailed || !$result['success']) {
            $this->line("   üìç Type: {$device->connection_type} ({$device->brand})");
            $this->line("   üåê URL/IP: {$result['url_tested']}");
            $this->line("   ‚è±Ô∏è  Temps de r√©ponse: {$result['response_time']}ms");
            
            if ($result['success']) {
                $this->line("   üìä Donn√©es: {$result['data_count']} pointages");
                
                if (!empty($result['details'])) {
                    foreach ($result['details'] as $detail) {
                        $this->line("   ‚ÑπÔ∏è  {$detail}");
                    }
                }
            } else {
                $this->line("   ‚ùó Erreur: {$result['error']}");
            }
            
            $this->line("   üîÑ Statut mis √† jour: " . ($result['success'] ? 'connected' : 'disconnected'));
        }
    }

    /**
     * Afficher le r√©sum√© des tests
     */
    private function displaySummary(array $results)
    {
        $total = count($results);
        $success = count(array_filter($results, fn($r) => $r['success']));
        $failed = $total - $success;

        $this->info('üìà === R√âSUM√â DES TESTS ===');
        $this->line("‚úÖ Appareils connect√©s: {$success}/{$total}");
        
        if ($failed > 0) {
            $this->line("‚ùå Appareils en √©chec: {$failed}/{$total}");
        }

        $avgResponseTime = round(array_sum(array_column($results, 'response_time')) / $total, 2);
        $this->line("‚è±Ô∏è  Temps de r√©ponse moyen: {$avgResponseTime}ms");

        $totalData = array_sum(array_column($results, 'data_count'));
        $this->line("üìä Total pointages disponibles: {$totalData}");

        if ($failed > 0) {
            $this->newLine();
            $this->warn('üí° Conseil: Utilisez --all pour voir les d√©tails de tous les appareils');
        }
    }

    /**
     * Tester et afficher les donn√©es JSON d'un appareil sp√©cifique
     */
    protected function testDeviceJson($device)
    {
        $this->info("üîç TEST JSON D√âTAILL√â - Appareil: {$device->name}");
        $this->info("üì° URL API: {$device->api_url}");
        $this->info("üåç Fuseau horaire: " . config('app.timezone'));
        $this->line("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        
        $result = [
            'device_id' => $device->id,
            'device_name' => $device->name,
            'success' => false,
            'response_time' => 0,
            'json_data' => null,
            'parsed_data' => null,
            'errors' => []
        ];

        try {
            if ($device->brand === 'api-facial') {
                $this->info("üîó Utilisation du driver ApiFacialDriver...");
                
                $driver = new \App\Services\BiometricSync\Drivers\ApiFacialDriver($device);
                
                $this->info("üì° Test de connexion...");
                $startTime = microtime(true);
                
                // Test de connexion d'abord
                $connectionResult = $driver->testConnection($device);
                
                if ($connectionResult['success']) {
                    $this->info("‚úÖ Connexion r√©ussie");
                    
                    $this->info("üì• R√©cup√©ration des donn√©es JSON...");
                    
                    // R√©cup√©rer les donn√©es brutes
                    $jsonData = $driver->fetchAttendanceData();
                    
                    $responseTime = round((microtime(true) - $startTime) * 1000, 2);
                    
                    $this->info("‚è±Ô∏è  Temps de r√©ponse: {$responseTime}ms");
                    $this->info("üìä Donn√©es r√©cup√©r√©es: " . count($jsonData) . " enregistrements");
                    
                    if (!empty($jsonData)) {
                        $this->info("üéØ Aper√ßu des donn√©es (3 premiers):");
                        
                        $preview = array_slice($jsonData, 0, 3);
                        foreach ($preview as $index => $record) {
                            $this->line("   üìù Enregistrement " . ($index + 1) . ":");
                            
                            // Afficher les champs principaux
                            if (isset($record['employee_id'])) {
                                $this->line("      üë§ ID Employ√©: " . $record['employee_id']);
                            }
                            if (isset($record['date'])) {
                                $this->line("      üìÖ Date: " . $record['date']);
                            }
                            if (isset($record['time'])) {
                                $localTime = \Carbon\Carbon::parse($record['time'])
                                    ->setTimezone(config('app.timezone'))
                                    ->format('H:i:s');
                                $this->line("      ‚è∞ Heure: " . $localTime . " (heure locale)");
                            }
                            if (isset($record['type'])) {
                                $typeText = $record['type'] == 1 ? 'Entr√©e' : 'Sortie';
                                $this->line("      üö™ Type: " . $typeText);
                            }
                            $this->line("");
                        }
                        
                        if (count($jsonData) > 3) {
                            $remaining = count($jsonData) - 3;
                            $this->line("   ... et {$remaining} autre(s) enregistrement(s)");
                        }
                    } else {
                        $this->warn("‚ö†Ô∏è  Aucune donn√©e de pointage trouv√©e dans la r√©ponse JSON");
                    }
                    
                    $result['success'] = true;
                    $result['response_time'] = $responseTime;
                    $result['json_data'] = $jsonData;
                    
                } else {
                    $this->error("‚ùå √âchec de la connexion: " . implode(', ', $connectionResult['errors'] ?? ['Erreur inconnue']));
                    $result['errors'] = $connectionResult['errors'] ?? [];
                }
                
            } else {
                $this->warn("‚ö†Ô∏è  Type d'appareil non pris en charge pour le test JSON: {$device->brand}");
                $result['errors'][] = "Type d'appareil non pris en charge";
            }
            
        } catch (\Exception $e) {
            $this->error("‚ùå Erreur lors du test: " . $e->getMessage());
            $result['errors'][] = $e->getMessage();
        }
        
        // Mettre √† jour le statut de l'appareil
        $status = $result['success'] ? 'connected' : 'disconnected';
        $device->update([
            'connection_status' => $status,
            'last_connection_test_at' => now()
        ]);
        
        $this->info("üîÑ Statut mis √† jour: {$status}");
        
        return $result;
    }

    /**
     * Afficher un r√©sum√© des donn√©es consolid√©es
     */
    private function displayConsolidatedSummary(array $consolidatedData): void
    {
        $employeeIds = array_column($consolidatedData, 'employee_id');
        $uniqueEmployees = array_unique($employeeIds);
        $dates = array_column($consolidatedData, 'date');
        $uniqueDates = array_unique($dates);
        
        $withDeparture = count(array_filter($consolidatedData, fn($r) => !empty($r['heure_depart'])));
        $arrivalOnly = count($consolidatedData) - $withDeparture;
        
        $this->table(
            ['M√©trique', 'Valeur'],
            [
                ['Total enregistrements', count($consolidatedData)],
                ['Employ√©s uniques', count($uniqueEmployees)],
                ['Dates uniques', count($uniqueDates)],
                ['Avec d√©part', $withDeparture],
                ['Arriv√©e seulement', $arrivalOnly],
                ['Plage de dates', min($dates) . ' ‚Üí ' . max($dates)]
            ]
        );
        
        // Top 5 des employ√©s avec le plus de pointages
        $employeeCounts = array_count_values($employeeIds);
        arsort($employeeCounts);
        $topEmployees = array_slice($employeeCounts, 0, 5, true);
        
        if (!empty($topEmployees)) {
            $this->newLine();
            $this->info("üë• TOP EMPLOY√âS (par nombre de pointages):");
            
            $tableData = [];
            foreach ($topEmployees as $empId => $count) {
                $tableData[] = ["Employ√© {$empId}", $count];
            }
            
            $this->table(['Employ√©', 'Pointages'], $tableData);
        }
    }
} 